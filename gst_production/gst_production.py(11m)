from odoo import api, fields, models, _
from odoo.tools import amount_to_text_en, float_round
from datetime import datetime, timedelta
from odoo.tools import float_is_zero, float_compare, DEFAULT_SERVER_DATETIME_FORMAT

class saleOrderGST(models.Model):
	_inherit="sale.order"
	order_dlvry = fields.Date('EDRG',compute='update_edrg')

	@api.multi
	def attrs(self):
		ls = {}
		for line in self.order_line:
			tmpl = self.env['product.template'].search([('id','=',line.product_id.product_tmpl_id.id)])
			for attr in tmpl.attribute_line_ids:
				ls.update({line.product_id.name:len(attr.value_ids)})
		return ls

	@api.multi
	@api.depends('order_line','order_dlvry','order_line.edrg')
	def update_edrg(self):
		for sale in self:
			l = []
			if sale.order_line:
				for line in sale.order_line:
					l.append(line.edrg)
				if l:
					order_dlvry = max(l)
				self.order_dlvry = order_dlvry
			#print"====l===020=",l,order_dlvry,self.order_dlvry

	@api.multi    
	def amount_to_text(self, amount, currency):
		convert_amount_in_words = amount_to_text_en.amount_to_text(amount, lang='en', currency='')        
		convert_amount_in_words = convert_amount_in_words.replace(' and Zero Cent', ' Only ')         
		return convert_amount_in_words

	@api.multi
	def _prepare_invoice(self):
		res = super(saleOrderGST, self)._prepare_invoice()
		res.update({
			'carrier_id': self.carrier_id and self.carrier_id.id or '',
			'incoterms': self.incoterms and self.incoterms.id or '',
			'is_consignee': self.is_consignee and True or False,
			'consignee': self.consignee and self.consignee.id or '',
			'order_no': self.buyer_ref or self.name or '',
			'order_date': self.buyer_date or self.confirmation_date,
			'freight_charge': self.freight_charge,
			'freight_only': self.freight_only,
			'insurance_only': self.insurance_only,
			'bank_charge': self.bank_charge,
			'ext_charge': self.ext_chrgs,
			'global_disc': self.global_disc,
			'total_ntwt': self.total_nwt_crtn_total,
			'total_grwt': self.total_gwt_crtn_total,
			})
		return res

	@api.multi
    def action_invoice_create(self, grouped=False, final=False):
        """
        Create the invoice associated to the SO.
        :param grouped: if True, invoices are grouped by SO id. If False, invoices are grouped by
                        (partner_invoice_id, currency)
        :param final: if True, refunds will be generated if necessary
        :returns: list of created invoices
        """
        inv_obj = self.env['account.invoice']
        precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')
        invoices = {}
        references = {}
        invoices_origin = {}
        invoices_name = {}

        freight_charge = freight_only = insurance_only = bank_charge = ext_charge = global_disc = 0.00

        for order in self:
            print"---action_invoice_create----------group------order-----",order
            group_key = order.id if grouped else (order.partner_invoice_id.id, order.currency_id.id)
            for line in order.order_line.sorted(key=lambda l: l.qty_to_invoice < 0):
                if float_is_zero(line.qty_to_invoice, precision_digits=precision):
                    continue
                if group_key not in invoices:
                    inv_data = order._prepare_invoice()
                    invoice = inv_obj.create(inv_data)
                    references[invoice] = order
                    invoices[group_key] = invoice
                    invoices_origin[group_key] = [invoice.origin]
                    invoices_name[group_key] = [invoice.name]
                    freight_charge = order.freight_charge
                    freight_only = order.freight_only
                    insurance_only = order.insurance_only
                    bank_charge = order.bank_charge
                    ext_charge = order.ext_charge
                    global_disc = order.global_disc
                    print"--iffffffff---------+order.name)-------",order,order.name,invoice
                elif group_key in invoices:
                    if order.name not in invoices_origin[group_key]:
                        freight_charge = freight_charge + order.freight_charge
                        freight_only = freight_only + order.freight_only
                        insurance_only = insurance_only + order.insurance_only
                        bank_charge = bank_charge + order.bank_charge
                        ext_charge = ext_charge + order.ext_charge
                        global_disc = global_disc + order.global_disc
                        print"----111111--------+order.name)++++++++",order,order.name,invoice,freight_charge
                        #print"----222222--------+order.name)++++++++",order,order.name,freight_charge,invoices[0]

                        invoices_origin[group_key].append(order.name)
                    if order.client_order_ref and order.client_order_ref not in invoices_name[group_key]:
                        invoices_name[group_key].append(order.client_order_ref)

                if line.qty_to_invoice > 0:
                    line.invoice_line_create(invoices[group_key].id, line.qty_to_invoice)
                elif line.qty_to_invoice < 0 and final:
                    line.invoice_line_create(invoices[group_key].id, line.qty_to_invoice)

            if references.get(invoices.get(group_key)):
                if order not in references[invoices[group_key]]:
                    references[invoice] = references[invoice] | order

        print"----------------invoices--------base--------",invoices

        for group_key in invoices:
            invoices[group_key].write({'name': ', '.join(invoices_name[group_key]),
                                       'origin': ', '.join(invoices_origin[group_key]),
                                       'freight_charge': freight_charge,'freight_only': freight_only,
                                       'insurance_only': insurance_only,'bank_charge': bank_charge,
                                       'ext_charge': ext_charge,'global_disc': global_disc,})

        if not invoices:
            raise UserError(_('There is no invoicable line.'))

        #print"----------------invoices--------base--------",invoices22
        for invoice in invoices.values():
            invoice.compute_taxes()
            if not invoice.invoice_line_ids:
                raise UserError(_('There is no invoicable line.'))
            # If invoice is negative, do a refund invoice instead
            if invoice.amount_total < 0:
                invoice.type = 'out_refund'
                for line in invoice.invoice_line_ids:
                    line.quantity = -line.quantity
            # Use additional field helper function (for account extensions)
            for line in invoice.invoice_line_ids:
                line._set_additional_fields(invoice)
            # Necessary to force computation of taxes. In account_invoice, they are triggered
            # by onchanges, which are not triggered when doing a create.
            invoice.compute_taxes()
            invoice.message_post_with_view('mail.message_origin_link',
                values={'self': invoice, 'origin': references[invoice]},
                subtype_id=self.env.ref('mail.mt_note').id)
        return [inv.id for inv in invoices.values()]

	via_freight = fields.Many2one('freight.to','Via Freight To')
	freight_charge = fields.Monetary('Freight & Insurance')
	freight_only = fields.Monetary('Freight')
	insurance_only = fields.Monetary('Insurance')
	bank_charge = fields.Monetary('Banking & Handling')
	full_total = fields.Monetary('Total Amount',compute='total_price', store=True,)
	amount_total = fields.Monetary(string='Total', store=True, readonly=True, compute='_amount_all', track_visibility='always')
	confirmation_date = fields.Date(string='Confirmation Date', readonly=True, index=True, help="Date on which the sale order is confirmed.", oldname="date_confirm")
	remarks =fields.Text('Remarks')
	buyer_ref = fields.Text("Buyer's Order No")
	buyer_date = fields.Date("Buyer's Order Date")
	incoterms = fields.Many2one('incoterm.trade','Incoterm')
	delivery_time = fields.Many2one('delivered.time','Delivery Time')
	show_disc = fields.Boolean('Show Discount')
	show_ex_chrgs = fields.Boolean('Show Extra Charges')
	global_disc = fields.Monetary('Discount')
	chrgs_inf = fields.Text('Charges Info')
	ext_chrgs = fields.Monetary('Extra Charges')
	cbm_total = fields.Float('Total CBM',compute='total_price')
	total_vol_wt_total = fields.Float('Total Volume Weight',compute='total_price')
	total_nwt_crtn_total = fields.Float('Total Net Weight Carton',compute='total_price')
	total_gwt_crtn_total = fields.Float('Total Gross Weight Carton',compute='total_price')

	is_consignee = fields.Boolean('Consignee & Notify ?')
	consignee = fields.Many2one('res.partner', string='Consignee')
	notify = fields.Many2one('res.partner', string='Notify')

	revision_date = fields.Date('Revised Date')

	_order = "name desc" 
    
#     @api.multi
#     def name_get(self):
#         print "Entery=="
#         if context is None:
#             context = {}
#         if isinstance(ids, (int, long)):
#             ids = [ids]
#         res = []
#         if context.get('special_display_name', False):
#             for record in self.browse(cr, uid, ids, context=context):
#                 amount_total = record.amount_total
#                 incoterm = record.self.incoterm
#                 res.append(record.id, amount_total + " - " + incoterm + "%")
#         else:
#             # Do a for and set here the standard display name, for example if the standard display name were name, you should do the next for
#             for record in self.browse(cr, uid, ids, context=context):
#                 res.append(record.id, record.amount_total)
#         return res
#     @api.multi
#     def name_get(self):
#         res = []
#         for asset in self:
#             display_name = []
#             res.append((asset.id,
#                     asset.amount_total + ' ' + asset.incoterm.name))
#             return res

	@api.onchange('order_line.product_uom_qty','order_line.price_unit','amount_total','freight_charge','freight_only','insurance_only','bank_charge','global_disc','ext_chrgs')
	@api.depends('order_line.product_uom_qty','order_line.price_unit','amount_total','freight_charge','freight_only','insurance_only','bank_charge','global_disc','ext_chrgs')
	def total_price(self):
		tcbm=0
		tnwt=0
		tgwt=0
		tvwt=0
		for recs in self:
			recs.full_total = recs.amount_total + recs.freight_charge + recs.freight_only + recs.insurance_only + recs.bank_charge + recs.ext_chrgs - recs.global_disc
			for lines in recs.order_line:
				tcbm = tcbm + lines.cbm
				tnwt = tnwt + lines.total_nwt_crtn
				tgwt = tgwt + lines.total_gwt_crtn
				tvwt = tvwt + lines.total_vol_wt

			recs.cbm_total = tcbm
			recs.total_vol_wt_total = tvwt
			recs.total_nwt_crtn_total = tnwt
			recs.total_gwt_crtn_total = tgwt
			print "full_total====",recs.full_total,recs.cbm_total
		return
	
	@api.onchange('buyer_ref','buyer_date')
	def change_buyer_ref(self):
		print"-----change_payment_term----sel;f=======",self.name
		invoice_ids = self.env['account.invoice'].search([('origin','=',self.name)])
		picking_ids = self.env['packing.list'].search([('origin','=',self.name)])
		if invoice_ids:
			for invoice_id in invoice_ids:
				invoice_id.write({'order_no':self.buyer_ref, 'order_date': self.buyer_date})
		if picking_ids:
			for picking_id in picking_ids:
				picking_id.write({'order_no':self.buyer_ref, 'order_date': self.buyer_date})

class incoterm_trade(models.Model):
    _name="incoterm.trade"
    
    name = fields.Char('INCOTERM')

class delivered_time(models.Model):
    _name="delivered.time"
    
    name= fields.Char("DELIVERY TIME")
    
class freight_to(models.Model):
    _name="freight.to"  
    _description="Freight To"
    
    name= fields.Char('Freight Name')
      
class account_invoice(models.Model):
    _inherit = "account.invoice"
    
    @api.multi    
    def amount_to_text(self, amount, currency):
        convert_amount_in_words = amount_to_text_en.amount_to_text(amount, lang='en', currency='')        
        convert_amount_in_words = convert_amount_in_words.replace(' and Zero Cent', ' Only ')         
        return convert_amount_in_words
    
class ProductAttributeLine(models.Model):
	_inherit = "product.attribute.line"

	item_code = fields.Char('Item Code')
	no_of_catons = fields.Integer('Primary Unit', required=True)
	net_weight = fields.Float('Pri. Net Weight')
	gross_weight = fields.Float('Pri. Gross Weight')
	no_of_item = fields.Integer('Unit in carton Qty.', required=True)
	toal_qty_carton = fields.Integer('Total Qty. in Carton', readonly=True)
	carton_nwt = fields.Float('Carton Net Weight')
	carton_gwt = fields.Float('Carton Gross Weight')
	x_attr = fields.Float('Len', required=True)
	y_attr = fields.Float('Breadth',required=True) 
	z_attr = fields.Float('Height',required=True)
	total_qty = fields.Float('Total Qty')
	cartons = fields.Float('Cartons')
	vol_wt = fields.Float('Unit carton CBM', readonly=True)
	cbm = fields.Float('CBM', readonly=True)
	total_vol_wt = fields.Float('Total Volume Weight')
	total_nwt_crtn = fields.Float('Total Net Weight Carton') 
	total_gwt_crtn = fields.Float('Total Gross Weight Carton') 

	#     x_attr = fields.Many2one('product.dimen', 'Dimension(Len)')
	#     y_attr = fields.Many2one('product.dimen','Dimension(B)')
	
	@api.onchange('value_ids')
	def onchange_attvalue(self):
		print"-----------99999999999--------",self.item_code,self.product_tmpl_id.id
		tmpl = self.env['product.template'].search([('name','=',self.product_tmpl_id.name)])
		prod = self.env['product.product'].search([('product_tmpl_id','=',tmpl.id)])
		print"--prod---------prod--",prod
		for p in prod:
			print"00000000000000000000000000",p.item_code
			p.write({'item_code': self.item_code, 'no_of_catons': self.no_of_catons, 'net_weight': self.net_weight,
				'gross_weight': self.gross_weight, 'no_of_item': self.no_of_item, 'toal_qty_carton': self.toal_qty_carton,
				'carton_nwt': self.carton_nwt, 'carton_gwt': self.carton_gwt, 'x_attr': self.x_attr, 'y_attr': self.y_attr,
				'z_attr': self.z_attr, 'total_qty': self.total_qty, 'cartons': self.cartons, 'vol_wt': self.vol_wt,
				'cbm': self.cbm, 'total_vol_wt': self.total_vol_wt, 'total_nwt_crtn': self.total_nwt_crtn,
				'total_gwt_crtn': self.total_gwt_crtn
			})
			

    
class ProductTemplate(models.Model):
	_inherit = 'product.template'

	no_of_item = fields.Integer('No. Of Items in 1 carton')
	comp = fields.Char(compute="calculate_cbm", string="Calc. CBM")

	@api.multi
	def calculate_cbm(self):
		print "ENTRY=---"
		for line in self.attribute_line_ids:
			#ttl_qty_crtn = 1.0
			#cbm = 1.0
			#crtns = 1.0
			vol_per_crtn = 1.0
			#ttl_vol_wt = 1.0
			#ttl_nwt_crtn = 1.0
			#ttl_gwt_crtn = 1.0
			ttl_qty_crtn = line.no_of_catons * line.no_of_item
			#crtns = line.total_qty / ttl_qty_crtn
			vol_per_crtn = (line.x_attr * line.y_attr * line.z_attr)/1000000
			#cbm = (line.x_attr * line.y_attr * line.z_attr * crtns)/1000000
			#ttl_vol_wt = cbm * 167
			#ttl_nwt_crtn = crtns * line.carton_nwt
			#ttl_gwt_crtn = crtns * line.carton_gwt
			#line.write({'toal_qty_carton': ttl_qty_crtn, 'cbm': cbm, 'cartons': crtns, 'vol_wt': vol_per_crtn, 'cbm': cbm, 'total_vol_wt': ttl_vol_wt, 'total_nwt_crtn': ttl_nwt_crtn, 'total_gwt_crtn': ttl_gwt_crtn})
			line.write({'toal_qty_carton': ttl_qty_crtn, 'vol_wt': vol_per_crtn,})
			print "+++CBM+++",line.cbm,line.toal_qty_carton
		return
    
# class ProductDimen(models.Model):
#     _name = "product.dimen"
#     
#     name = fields.Char('Name')
class SaleOrderLine(models.Model):
	_inherit = 'sale.order.line'    

	@api.multi
	def _prepare_invoice_line(self, qty):
		print"-----------custom-----------",self
		res = super(SaleOrderLine, self)._prepare_invoice_line(qty)
		res.update({
			'order_qty': self.product_uom_qty,
		})
		return res	

	@api.multi
	def invoice_line_create(self, invoice_id, qty):
		precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')
		for line in self:
			if not float_is_zero(qty, precision_digits=precision):
				vals = line._prepare_invoice_line(qty=qty)
				vals.update({'invoice_id': invoice_id, 'sale_line_ids': [(6, 0, [line.id])]})
				print"--------custom----------vals--invoice_line_create----",vals
				line = self.env['account.invoice.line'].search([('invoice_id','=', vals['invoice_id']),('product_id','=',vals['product_id']),('uom_id','=',vals['uom_id']),('price_unit','=',vals['price_unit'])])
				if not line:
					self.env['account.invoice.line'].create(vals)	
				if line:
					line.write({'order_qty': line.order_qty + vals['order_qty'], 'quantity': line.quantity + vals['quantity']})	    
    
    
    
    
    
    
    
    
